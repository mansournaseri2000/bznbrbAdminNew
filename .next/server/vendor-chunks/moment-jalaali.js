/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/moment-jalaali";
exports.ids = ["vendor-chunks/moment-jalaali"];
exports.modules = {

/***/ "(ssr)/./node_modules/moment-jalaali/index.js":
/*!**********************************************!*\
  !*** ./node_modules/moment-jalaali/index.js ***!
  \**********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = jMoment\n\nvar moment = __webpack_require__(/*! moment/moment */ \"(ssr)/./node_modules/moment/moment.js\")\n  , jalaali = __webpack_require__(/*! jalaali-js */ \"(ssr)/./node_modules/jalaali-js/index.js\")\n\n/************************************\n    Constants\n************************************/\n\nvar formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?j(Mo|MM?M?M?|Do|DDDo|DD?D?D?|w[o|w]?|YYYYY|YYYY|YY|gg(ggg?)?|)|(\\\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|SS?S?|X|zz?|ZZ?|.)/g\n  , localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS?|LL?L?L?|l{1,4})/g\n\n  , parseTokenOneOrTwoDigits = /\\d\\d?/\n  , parseTokenOneToThreeDigits = /\\d{1,3}/\n  , parseTokenThreeDigits = /\\d{3}/\n  , parseTokenFourDigits = /\\d{1,4}/\n  , parseTokenSixDigits = /[+\\-]?\\d{1,6}/\n  , parseTokenWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i\n  , parseTokenTimezone = /Z|[\\+\\-]\\d\\d:?\\d\\d/i\n  , parseTokenT = /T/i\n  , parseTokenTimestampMs = /[\\+\\-]?\\d+(\\.\\d{1,3})?/\n  , symbolMap = {\n    '1': '۱',\n    '2': '۲',\n    '3': '۳',\n    '4': '۴',\n    '5': '۵',\n    '6': '۶',\n    '7': '۷',\n    '8': '۸',\n    '9': '۹',\n    '0': '۰'\n  }\n  , numberMap = {\n    '۱': '1',\n    '۲': '2',\n    '۳': '3',\n    '۴': '4',\n    '۵': '5',\n    '۶': '6',\n    '۷': '7',\n    '۸': '8',\n    '۹': '9',\n    '۰': '0'\n  }\n\n\n  , unitAliases =\n    { jm: 'jmonth'\n    , jmonths: 'jmonth'\n    , jy: 'jyear'\n    , jyears: 'jyear'\n    }\n\n  , formatFunctions = {}\n\n  , ordinalizeTokens = 'DDD w M D'.split(' ')\n  , paddedTokens = 'M D w'.split(' ')\n\n  , formatTokenFunctions =\n    { jM: function () {\n        return this.jMonth() + 1\n      }\n    , jMMM: function (format) {\n        return this.localeData().jMonthsShort(this, format)\n      }\n    , jMMMM: function (format) {\n        return this.localeData().jMonths(this, format)\n      }\n    , jD: function () {\n        return this.jDate()\n      }\n    , jDDD: function () {\n        return this.jDayOfYear()\n      }\n    , jw: function () {\n        return this.jWeek()\n      }\n    , jYY: function () {\n        return leftZeroFill(this.jYear() % 100, 2)\n      }\n    , jYYYY: function () {\n        return leftZeroFill(this.jYear(), 4)\n      }\n    , jYYYYY: function () {\n        return leftZeroFill(this.jYear(), 5)\n      }\n    , jgg: function () {\n        return leftZeroFill(this.jWeekYear() % 100, 2)\n      }\n    , jgggg: function () {\n        return this.jWeekYear()\n      }\n    , jggggg: function () {\n        return leftZeroFill(this.jWeekYear(), 5)\n      }\n    }\n\nfunction padToken(func, count) {\n  return function (a) {\n    return leftZeroFill(func.call(this, a), count)\n  }\n}\nfunction ordinalizeToken(func, period) {\n  return function (a) {\n    return this.localeData().ordinal(func.call(this, a), period)\n  }\n}\n\n(function () {\n  var i\n  while (ordinalizeTokens.length) {\n    i = ordinalizeTokens.pop()\n    formatTokenFunctions['j' + i + 'o'] = ordinalizeToken(formatTokenFunctions['j' + i], i)\n  }\n  while (paddedTokens.length) {\n    i = paddedTokens.pop()\n    formatTokenFunctions['j' + i + i] = padToken(formatTokenFunctions['j' + i], 2)\n  }\n  formatTokenFunctions.jDDDD = padToken(formatTokenFunctions.jDDD, 3)\n}())\n\n/************************************\n    Helpers\n************************************/\n\nfunction extend(a, b) {\n  var key\n  for (key in b)\n    if (b.hasOwnProperty(key))\n      a[key] = b[key]\n  return a\n}\n\nfunction leftZeroFill(number, targetLength) {\n  var output = number + ''\n  while (output.length < targetLength)\n    output = '0' + output\n  return output\n}\n\nfunction isArray(input) {\n  return Object.prototype.toString.call(input) === '[object Array]'\n}\n\n// function compareArrays(array1, array2) {\n//   var len = Math.min(array1.length, array2.length)\n//     , lengthDiff = Math.abs(array1.length - array2.length)\n//     , diffs = 0\n//     , i\n//   for (i = 0; i < len; i += 1)\n//     if (~~array1[i] !== ~~array2[i])\n//       diffs += 1\n//   return diffs + lengthDiff\n// }\n\nfunction normalizeUnits(units) {\n  if (units) {\n    var lowered = units.toLowerCase()\n    units = unitAliases[lowered] || lowered\n  }\n  return units\n}\n\nfunction setDate(m, year, month, date) {\n  var d = m._d\n  if (isNaN(year)) {\n    m._isValid = false\n  }\n  if (m._isUTC) {\n    /*eslint-disable new-cap*/\n    m._d = new Date(Date.UTC(year, month, date,\n        d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds()))\n    /*eslint-enable new-cap*/\n  } else {\n    m._d = new Date(year, month, date,\n        d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds())\n  }\n}\n\nfunction objectCreate(parent) {\n  function F() {}\n  F.prototype = parent\n  return new F()\n}\n\nfunction getPrototypeOf(object) {\n  if (Object.getPrototypeOf)\n    return Object.getPrototypeOf(object)\n  else if (''.__proto__)\n    return object.__proto__\n  else\n    return object.constructor.prototype\n}\n\n/************************************\n    Languages\n************************************/\nextend(getPrototypeOf(moment.localeData()),\n  { _jMonths: [ 'Farvardin'\n              , 'Ordibehesht'\n              , 'Khordaad'\n              , 'Tir'\n              , 'Amordaad'\n              , 'Shahrivar'\n              , 'Mehr'\n              , 'Aabaan'\n              , 'Aazar'\n              , 'Dey'\n              , 'Bahman'\n              , 'Esfand'\n              ]\n  , jMonths: function (m) {\n      return this._jMonths[m.jMonth()]\n    }\n\n  , _jMonthsShort:  [ 'Far'\n                    , 'Ord'\n                    , 'Kho'\n                    , 'Tir'\n                    , 'Amo'\n                    , 'Sha'\n                    , 'Meh'\n                    , 'Aab'\n                    , 'Aaz'\n                    , 'Dey'\n                    , 'Bah'\n                    , 'Esf'\n                    ]\n  , jMonthsShort: function (m) {\n      return this._jMonthsShort[m.jMonth()]\n    }\n\n  , jMonthsParse: function (monthName) {\n      var i\n        , mom\n        , regex\n      if (!this._jMonthsParse)\n        this._jMonthsParse = []\n      for (i = 0; i < 12; i += 1) {\n        // Make the regex if we don't have it already.\n        if (!this._jMonthsParse[i]) {\n          mom = jMoment([2000, (2 + i) % 12, 25])\n          regex = '^' + this.jMonths(mom, '') + '|^' + this.jMonthsShort(mom, '')\n          this._jMonthsParse[i] = new RegExp(regex.replace('.', ''), 'i')\n        }\n        // Test the regex.\n        if (this._jMonthsParse[i].test(monthName))\n          return i\n      }\n    }\n  }\n)\n\n/************************************\n    Formatting\n************************************/\n\nfunction makeFormatFunction(format) {\n  var array = format.match(formattingTokens)\n    , length = array.length\n    , i\n\n  for (i = 0; i < length; i += 1)\n    if (formatTokenFunctions[array[i]])\n      array[i] = formatTokenFunctions[array[i]]\n\n  return function (mom) {\n    var output = ''\n    for (i = 0; i < length; i += 1)\n      output += array[i] instanceof Function ? '[' + array[i].call(mom, format) + ']' : array[i]\n    return output\n  }\n}\n\n/************************************\n    Parsing\n************************************/\n\nfunction getParseRegexForToken(token, config) {\n  switch (token) {\n  case 'jDDDD':\n    return parseTokenThreeDigits\n  case 'jYYYY':\n    return parseTokenFourDigits\n  case 'jYYYYY':\n    return parseTokenSixDigits\n  case 'jDDD':\n    return parseTokenOneToThreeDigits\n  case 'jMMM':\n  case 'jMMMM':\n    return parseTokenWord\n  case 'jMM':\n  case 'jDD':\n  case 'jYY':\n  case 'jM':\n  case 'jD':\n    return parseTokenOneOrTwoDigits\n  case 'DDDD':\n    return parseTokenThreeDigits\n  case 'YYYY':\n    return parseTokenFourDigits\n  case 'YYYYY':\n    return parseTokenSixDigits\n  case 'S':\n  case 'SS':\n  case 'SSS':\n  case 'DDD':\n    return parseTokenOneToThreeDigits\n  case 'MMM':\n  case 'MMMM':\n  case 'dd':\n  case 'ddd':\n  case 'dddd':\n    return parseTokenWord\n  case 'a':\n  case 'A':\n    return moment.localeData(config._l)._meridiemParse\n  case 'X':\n    return parseTokenTimestampMs\n  case 'Z':\n  case 'ZZ':\n    return parseTokenTimezone\n  case 'T':\n    return parseTokenT\n  case 'MM':\n  case 'DD':\n  case 'YY':\n  case 'HH':\n  case 'hh':\n  case 'mm':\n  case 'ss':\n  case 'M':\n  case 'D':\n  case 'd':\n  case 'H':\n  case 'h':\n  case 'm':\n  case 's':\n    return parseTokenOneOrTwoDigits\n  default:\n    return new RegExp(token.replace('\\\\', ''))\n  }\n}\n\nfunction addTimeToArrayFromToken(token, input, config) {\n  var a\n    , datePartArray = config._a\n\n  switch (token) {\n  case 'jM':\n  case 'jMM':\n    datePartArray[1] = input == null ? 0 : ~~input - 1\n    break\n  case 'jMMM':\n  case 'jMMMM':\n    a = moment.localeData(config._l).jMonthsParse(input)\n    if (a != null)\n      datePartArray[1] = a\n    else\n      config._isValid = false\n    break\n  case 'jD':\n  case 'jDD':\n  case 'jDDD':\n  case 'jDDDD':\n    if (input != null)\n      datePartArray[2] = ~~input\n    break\n  case 'jYY':\n    datePartArray[0] = ~~input + (~~input > 47 ? 1300 : 1400)\n    break\n  case 'jYYYY':\n  case 'jYYYYY':\n    datePartArray[0] = ~~input\n  }\n  if (input == null)\n    config._isValid = false\n}\n\nfunction dateFromArray(config) {\n  var g\n    , j\n    , jy = config._a[0]\n    , jm = config._a[1]\n    , jd = config._a[2]\n\n  if ((jy == null) && (jm == null) && (jd == null))\n    return [0, 0, 1]\n  jy = jy != null ? jy : 0\n  jm = jm != null ? jm : 0\n  jd = jd != null ? jd : 1\n  if (jd < 1 || jd > jMoment.jDaysInMonth(jy, jm) || jm < 0 || jm > 11)\n    config._isValid = false\n  g = toGregorian(jy, jm, jd)\n  j = toJalaali(g.gy, g.gm, g.gd)\n  if (isNaN(g.gy))\n    config._isValid = false\n  config._jDiff = 0\n  if (~~j.jy !== jy)\n    config._jDiff += 1\n  if (~~j.jm !== jm)\n    config._jDiff += 1\n  if (~~j.jd !== jd)\n    config._jDiff += 1\n  return [g.gy, g.gm, g.gd]\n}\n\nfunction makeDateFromStringAndFormat(config) {\n  var tokens = config._f.match(formattingTokens)\n    , string = config._i + ''\n    , len = tokens.length\n    , i\n    , token\n    , parsedInput\n\n  config._a = []\n\n  for (i = 0; i < len; i += 1) {\n    token = tokens[i]\n    parsedInput = (getParseRegexForToken(token, config).exec(string) || [])[0]\n    if (parsedInput)\n      string = string.slice(string.indexOf(parsedInput) + parsedInput.length)\n    if (formatTokenFunctions[token])\n      addTimeToArrayFromToken(token, parsedInput, config)\n  }\n  if (string)\n    config._il = string\n  return dateFromArray(config)\n}\n\nfunction makeDateFromStringAndArray(config, utc) {\n  var len = config._f.length\n    , i\n    , format\n    , tempMoment\n    , bestMoment\n    , currentScore\n    , scoreToBeat\n\n  if (len === 0) {\n    return makeMoment(new Date(NaN))\n  }\n\n  for (i = 0; i < len; i += 1) {\n    format = config._f[i]\n    currentScore = 0\n    tempMoment = makeMoment(config._i, format, config._l, config._strict, utc)\n\n    if (!tempMoment.isValid()) continue\n\n    // currentScore = compareArrays(tempMoment._a, tempMoment.toArray())\n    currentScore += tempMoment._jDiff\n    if (tempMoment._il)\n      currentScore += tempMoment._il.length\n    if (scoreToBeat == null || currentScore < scoreToBeat) {\n      scoreToBeat = currentScore\n      bestMoment = tempMoment\n    }\n  }\n\n  return bestMoment\n}\n\nfunction removeParsedTokens(config) {\n  var string = config._i + ''\n    , input = ''\n    , format = ''\n    , array = config._f.match(formattingTokens)\n    , len = array.length\n    , i\n    , match\n    , parsed\n\n  for (i = 0; i < len; i += 1) {\n    match = array[i]\n    parsed = (getParseRegexForToken(match, config).exec(string) || [])[0]\n    if (parsed)\n      string = string.slice(string.indexOf(parsed) + parsed.length)\n    if (!(formatTokenFunctions[match] instanceof Function)) {\n      format += match\n      if (parsed)\n        input += parsed\n    }\n  }\n  config._i = input\n  config._f = format\n}\n\n/************************************\n    Week of Year\n************************************/\n\nfunction jWeekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {\n  var end = firstDayOfWeekOfYear - firstDayOfWeek\n    , daysToDayOfWeek = firstDayOfWeekOfYear - mom.day()\n    , adjustedMoment\n\n  if (daysToDayOfWeek > end) {\n    daysToDayOfWeek -= 7\n  }\n  if (daysToDayOfWeek < end - 7) {\n    daysToDayOfWeek += 7\n  }\n  adjustedMoment = jMoment(mom).add(daysToDayOfWeek, 'd')\n  return  { week: Math.ceil(adjustedMoment.jDayOfYear() / 7)\n          , year: adjustedMoment.jYear()\n          }\n}\n\n/************************************\n    Top Level Functions\n************************************/\nvar maxTimestamp = 57724432199999\n\nfunction makeMoment(input, format, lang, strict, utc) {\n  if (typeof lang === 'boolean') {\n    strict = lang\n    lang = undefined\n  }\n\n  if (format && typeof format === 'string')\n    format = fixFormat(format, moment)\n\n  var config =\n      { _i: input\n      , _f: format\n      , _l: lang\n      , _strict: strict\n      , _isUTC: utc\n      }\n    , date\n    , m\n    , jm\n    , origInput = input\n    , origFormat = format\n  if (format) {\n    if (isArray(format)) {\n      return makeDateFromStringAndArray(config, utc)\n    } else {\n      date = makeDateFromStringAndFormat(config)\n      removeParsedTokens(config)\n      format = 'YYYY-MM-DD-' + config._f\n      input = leftZeroFill(date[0], 4) + '-'\n            + leftZeroFill(date[1] + 1, 2) + '-'\n            + leftZeroFill(date[2], 2) + '-'\n            + config._i\n    }\n  }\n  if (utc)\n    m = moment.utc(input, format, lang, strict)\n  else\n    m = moment(input, format, lang, strict)\n  if (config._isValid === false)\n    m._isValid = false\n  m._jDiff = config._jDiff || 0\n  jm = objectCreate(jMoment.fn)\n  extend(jm, m)\n  if (strict && format && jm.isValid()) {\n    jm._isValid = jm.format(origFormat) === origInput\n  }\n  if (m._d.getTime() > maxTimestamp) {\n    jm._isValid = false\n  }\n  return jm\n}\n\nfunction jMoment(input, format, lang, strict) {\n  return makeMoment(input, format, lang, strict, false)\n}\n\nextend(jMoment, moment)\njMoment.fn = objectCreate(moment.fn)\n\njMoment.utc = function (input, format, lang, strict) {\n  return makeMoment(input, format, lang, strict, true)\n}\n\njMoment.unix = function (input) {\n  return makeMoment(input * 1000)\n}\n\n/************************************\n    jMoment Prototype\n************************************/\n\nfunction fixFormat(format, _moment) {\n  var i = 5\n  var replace = function (input) {\n    return _moment.localeData().longDateFormat(input) || input\n  }\n  while (i > 0 && localFormattingTokens.test(format)) {\n    i -= 1\n    format = format.replace(localFormattingTokens, replace)\n  }\n  return format\n}\n\njMoment.fn.format = function (format) {\n\n  if (format) {\n    format = fixFormat(format, this)\n\n    if (!formatFunctions[format]) {\n      formatFunctions[format] = makeFormatFunction(format)\n    }\n    format = formatFunctions[format](this)\n  }\n  return moment.fn.format.call(this, format)\n}\n\njMoment.fn.jYear = function (input) {\n  var lastDay\n    , j\n    , g\n  if (typeof input === 'number') {\n    j = toJalaali(this.year(), this.month(), this.date())\n    lastDay = Math.min(j.jd, jMoment.jDaysInMonth(input, j.jm))\n    g = toGregorian(input, j.jm, lastDay)\n    setDate(this, g.gy, g.gm, g.gd)\n    moment.updateOffset(this)\n    return this\n  } else {\n    return toJalaali(this.year(), this.month(), this.date()).jy\n  }\n}\n\njMoment.fn.jMonth = function (input) {\n  var lastDay\n    , j\n    , g\n  if (input != null) {\n    if (typeof input === 'string') {\n      input = this.localeData().jMonthsParse(input)\n      if (typeof input !== 'number')\n        return this\n    }\n    j = toJalaali(this.year(), this.month(), this.date())\n    lastDay = Math.min(j.jd, jMoment.jDaysInMonth(j.jy, input))\n    this.jYear(j.jy + div(input, 12))\n    input = mod(input, 12)\n    if (input < 0) {\n      input += 12\n      this.jYear(this.jYear() - 1)\n    }\n    g = toGregorian(this.jYear(), input, lastDay)\n    setDate(this, g.gy, g.gm, g.gd)\n    moment.updateOffset(this)\n    return this\n  } else {\n    return toJalaali(this.year(), this.month(), this.date()).jm\n  }\n}\n\njMoment.fn.jDate = function (input) {\n  var j\n    , g\n  if (typeof input === 'number') {\n    j = toJalaali(this.year(), this.month(), this.date())\n    g = toGregorian(j.jy, j.jm, input)\n    setDate(this, g.gy, g.gm, g.gd)\n    moment.updateOffset(this)\n    return this\n  } else {\n    return toJalaali(this.year(), this.month(), this.date()).jd\n  }\n}\n\njMoment.fn.jDayOfYear = function (input) {\n  var dayOfYear = Math.round((jMoment(this).startOf('day') - jMoment(this).startOf('jYear')) / 864e5) + 1\n  return input == null ? dayOfYear : this.add(input - dayOfYear, 'd')\n}\n\njMoment.fn.jWeek = function (input) {\n  var week = jWeekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).week\n  return input == null ? week : this.add((input - week) * 7, 'd')\n}\n\njMoment.fn.jWeekYear = function (input) {\n  var year = jWeekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year\n  return input == null ? year : this.add(input - year, 'y')\n}\n\njMoment.fn.add = function (val, units) {\n  var temp\n  if (units !== null && !isNaN(+units)) {\n    temp = val\n    val = units\n    units = temp\n  }\n  units = normalizeUnits(units)\n  if (units === 'jyear') {\n    this.jYear(this.jYear() + val)\n  } else if (units === 'jmonth') {\n    this.jMonth(this.jMonth() + val)\n  } else {\n    moment.fn.add.call(this, val, units)\n    if (isNaN(this.jYear())) {\n      this._isValid = false\n    }\n  }\n  return this\n}\n\njMoment.fn.subtract = function (val, units) {\n  var temp\n  if (units !== null && !isNaN(+units)) {\n    temp = val\n    val = units\n    units = temp\n  }\n  units = normalizeUnits(units)\n  if (units === 'jyear') {\n    this.jYear(this.jYear() - val)\n  } else if (units === 'jmonth') {\n    this.jMonth(this.jMonth() - val)\n  } else {\n    moment.fn.subtract.call(this, val, units)\n  }\n  return this\n}\n\njMoment.fn.startOf = function (units) {\n  units = normalizeUnits(units)\n  if (units === 'jyear' || units === 'jmonth') {\n    if (units === 'jyear') {\n      this.jMonth(0)\n    }\n    this.jDate(1)\n    this.hours(0)\n    this.minutes(0)\n    this.seconds(0)\n    this.milliseconds(0)\n    return this\n  } else {\n    return moment.fn.startOf.call(this, units)\n  }\n}\n\njMoment.fn.endOf = function (units) {\n  units = normalizeUnits(units)\n  if (units === undefined || units === 'milisecond') {\n    return this\n  }\n  return this.startOf(units).add(1, (units === 'isoweek' ? 'week' : units)).subtract(1, 'ms')\n}\n\njMoment.fn.isSame = function (other, units) {\n  units = normalizeUnits(units)\n  if (units === 'jyear' || units === 'jmonth') {\n    return moment.fn.isSame.call(this.startOf(units), other.startOf(units))\n  }\n  return moment.fn.isSame.call(this, other, units)\n}\n\njMoment.fn.clone = function () {\n  return jMoment(this)\n}\n\njMoment.fn.jYears = jMoment.fn.jYear\njMoment.fn.jMonths = jMoment.fn.jMonth\njMoment.fn.jDates = jMoment.fn.jDate\njMoment.fn.jWeeks = jMoment.fn.jWeek\n\n/************************************\n    jMoment Statics\n************************************/\n\njMoment.jDaysInMonth = function (year, month) {\n  year += div(month, 12)\n  month = mod(month, 12)\n  if (month < 0) {\n    month += 12\n    year -= 1\n  }\n  if (month < 6) {\n    return 31\n  } else if (month < 11) {\n    return 30\n  } else if (jMoment.jIsLeapYear(year)) {\n    return 30\n  } else {\n    return 29\n  }\n}\n\njMoment.jIsLeapYear = jalaali.isLeapJalaaliYear\n\njMoment.loadPersian = function (args) {\n  var usePersianDigits =  args !== undefined && args.hasOwnProperty('usePersianDigits') ? args.usePersianDigits : false\n  var dialect =  args !== undefined && args.hasOwnProperty('dialect') ? args.dialect : 'persian'\n  moment.locale('fa')\n  moment.updateLocale('fa'\n  , { months: ('ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر').split('_')\n    , monthsShort: ('ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر').split('_')\n    , weekdays:\n      {\n        'persian': ('یک\\u200cشنبه_دوشنبه_سه\\u200cشنبه_چهارشنبه_پنج\\u200cشنبه_آدینه_شنبه').split('_'),\n        'persian-modern': ('یک\\u200cشنبه_دوشنبه_سه\\u200cشنبه_چهارشنبه_پنج\\u200cشنبه_جمعه_شنبه').split('_')\n      }[dialect]\n    , weekdaysShort:\n      {\n        'persian': ('یک\\u200cشنبه_دوشنبه_سه\\u200cشنبه_چهارشنبه_پنج\\u200cشنبه_آدینه_شنبه').split('_'),\n        'persian-modern': ('یک\\u200cشنبه_دوشنبه_سه\\u200cشنبه_چهارشنبه_پنج\\u200cشنبه_جمعه_شنبه').split('_')\n      }[dialect]\n    , weekdaysMin:\n      {\n        'persian': 'ی_د_س_چ_پ_آ_ش'.split('_'),\n        'persian-modern': 'ی_د_س_چ_پ_ج_ش'.split('_')\n      }[dialect]\n    , longDateFormat:\n      { LT: 'HH:mm'\n      , L: 'jYYYY/jMM/jDD'\n      , LL: 'jD jMMMM jYYYY'\n      , LLL: 'jD jMMMM jYYYY LT'\n      , LLLL: 'dddd، jD jMMMM jYYYY LT'\n      }\n    , calendar:\n      { sameDay: '[امروز ساعت] LT'\n      , nextDay: '[فردا ساعت] LT'\n      , nextWeek: 'dddd [ساعت] LT'\n      , lastDay: '[دیروز ساعت] LT'\n      , lastWeek: 'dddd [ی پیش ساعت] LT'\n      , sameElse: 'L'\n      }\n    , relativeTime:\n      { future: 'در %s'\n      , past: '%s پیش'\n      , s: 'چند ثانیه'\n      , m: '1 دقیقه'\n      , mm: '%d دقیقه'\n      , h: '1 ساعت'\n      , hh: '%d ساعت'\n      , d: '1 روز'\n      , dd: '%d روز'\n      , M: '1 ماه'\n      , MM: '%d ماه'\n      , y: '1 سال'\n      , yy: '%d سال'\n      }\n    , preparse: function (string) {\n        if (usePersianDigits) {\n          return string.replace(/[۰-۹]/g, function (match) {\n            return numberMap[match]\n          }).replace(/،/g, ',')\n        }\n        return string\n    }\n    , postformat: function (string) {\n        if (usePersianDigits) {\n          return string.replace(/\\d/g, function (match) {\n            return symbolMap[match]\n          }).replace(/,/g, '،')\n        }\n        return string\n    }\n    , ordinal: '%dم'\n    , week:\n      { dow: 6 // Saturday is the first day of the week.\n      , doy: 12 // The week that contains Jan 1st is the first week of the year.\n      }\n    , meridiem: function (hour) {\n        return hour < 12 ? 'ق.ظ' : 'ب.ظ'\n      }\n    , jMonths:\n      {\n        'persian': ('فروردین_اردیبهشت_خرداد_تیر_امرداد_شهریور_مهر_آبان_آذر_دی_بهمن_اسفند').split('_'),\n        'persian-modern': ('فروردین_اردیبهشت_خرداد_تیر_مرداد_شهریور_مهر_آبان_آذر_دی_بهمن_اسفند').split('_')\n      }[dialect]\n    , jMonthsShort:\n      {\n        'persian': 'فرو_ارد_خرد_تیر_امر_شهر_مهر_آبا_آذر_دی_بهم_اسف'.split('_'),\n        'persian-modern': 'فرو_ارد_خرد_تیر_مرد_شهر_مهر_آبا_آذر_دی_بهم_اسف'.split('_')\n      }[dialect]\n    }\n  )\n}\n\n\njMoment.loadPersian_dari = function (args) {\n  var usePersianDigits =  args !== undefined && args.hasOwnProperty('usePersianDigits') ? args.usePersianDigits : false\n  var dialect =  args !== undefined && args.hasOwnProperty('dialect') ? args.dialect : 'persian-dari'\n  moment.locale('fa-af')\n  moment.updateLocale('fa-af'\n  , { months: ('جنوری_فبروری_مارچ_اپریل_می_جون_جولای_آگست_سپتمبر_اکتوبر_نومبر_دیسمبر').split('_')\n    , monthsShort: ('جنوری_فبروری_مارچ_اپریل_می_جون_جولای_آگست_سپتمبر_اکتوبر_نومبر_دیسمبر').split('_')\n    , weekdays:\n      {\n        'persian': ('یک\\u200cشنبه_دوشنبه_سه\\u200cشنبه_چهارشنبه_پنج\\u200cشنبه_آدینه_شنبه').split('_'),\n        'persian-modern': ('یک\\u200cشنبه_دوشنبه_سه\\u200cشنبه_چهارشنبه_پنج\\u200cشنبه_جمعه_شنبه').split('_')\n      }[dialect]\n    , weekdaysShort:\n      {\n        'persian': ('یک\\u200cشنبه_دوشنبه_سه\\u200cشنبه_چهارشنبه_پنج\\u200cشنبه_آدینه_شنبه').split('_'),\n        'persian-modern': ('یک\\u200cشنبه_دوشنبه_سه\\u200cشنبه_چهارشنبه_پنج\\u200cشنبه_جمعه_شنبه').split('_')\n      }[dialect]\n    , weekdaysMin:\n      {\n        'persian': 'ی_د_س_چ_پ_آ_ش'.split('_'),\n        'persian-modern': 'ی_د_س_چ_پ_ج_ش'.split('_')\n      }[dialect]\n    , longDateFormat:\n      { LT: 'HH:mm'\n      , L: 'jYYYY/jMM/jDD'\n      , LL: 'jD jMMMM jYYYY'\n      , LLL: 'jD jMMMM jYYYY LT'\n      , LLLL: 'dddd، jD jMMMM jYYYY LT'\n      }\n    , calendar:\n      { sameDay: '[امروز ساعت] LT'\n      , nextDay: '[فردا ساعت] LT'\n      , nextWeek: 'dddd [ساعت] LT'\n      , lastDay: '[دیروز ساعت] LT'\n      , lastWeek: 'dddd [ی پیش ساعت] LT'\n      , sameElse: 'L'\n      }\n    , relativeTime:\n      { future: 'در %s'\n      , past: '%s پیش'\n      , s: 'چند ثانیه'\n      , m: '1 دقیقه'\n      , mm: '%d دقیقه'\n      , h: '1 ساعت'\n      , hh: '%d ساعت'\n      , d: '1 روز'\n      , dd: '%d روز'\n      , M: '1 ماه'\n      , MM: '%d ماه'\n      , y: '1 سال'\n      , yy: '%d سال'\n      }\n    , preparse: function (string) {\n        if (usePersianDigits) {\n          return string.replace(/[۰-۹]/g, function (match) {\n            return numberMap[match]\n          }).replace(/،/g, ',')\n        }\n        return string\n    }\n    , postformat: function (string) {\n        if (usePersianDigits) {\n          return string.replace(/\\d/g, function (match) {\n            return symbolMap[match]\n          }).replace(/,/g, '،')\n        }\n        return string\n    }\n    , ordinal: '%dم'\n    , week:\n      { dow: 6 // Saturday is the first day of the week.\n      , doy: 12 // The week that contains Jan 1st is the first week of the year.\n      }\n    , meridiem: function (hour) {\n        return hour < 12 ? 'ق.ظ' : 'ب.ظ'\n      }\n    , jMonths:\n      {\n        'persian-dari': ('حمل_ثور_جوزا_سرطان_اسد_سنبله_میزان_عقرب_قوس_جدی_دلو_حوت').split('_'),\n        'persian-modern-dari': ('حمل_ثور_جوزا_سرطان_اسد_سنبله_میزان_عقرب_قوس_جدی_دلو_حوت').split('_')\n      }[dialect]\n    , jMonthsShort:\n      {\n        'persian-dari': 'حمل_ثور_جوزا_سرط_اسد_سنب_میز_عقر_قوس_جدی_دلو_حوت'.split('_'),\n        'persian-modern-dari': 'حمل_ثور_جوزا_سرط_اسد_سنب_میز_عقر_قوس_جدی_دلو_حوت'.split('_')\n      }[dialect]\n    }\n  )\n}\n\njMoment.loadPashto = function (args) {\n  var usePersianDigits =  args !== undefined && args.hasOwnProperty('usePersianDigits') ? args.usePersianDigits : false\n  var dialect =  args !== undefined && args.hasOwnProperty('dialect') ? args.dialect : 'pashto'\n  moment.locale('ps-af')\n  moment.updateLocale('ps-af'\n  , { months: ('جنوری_فبروری_مارچ_اپریل_می_جون_جولای_آگست_سپتمبر_اکتوبر_نومبر_دیسمبر').split('_')\n    , monthsShort: ('جنوری_فبروری_مارچ_اپریل_می_جون_جولای_آگست_سپتمبر_اکتوبر_نومبر_دیسمبر').split('_')\n    , weekdays:\n      {\n        'pashto': ('یک\\u200cشنبه_دوشنبه_سه\\u200cشنبه_چهارشنبه_پنج\\u200cشنبه_آدینه_شنبه').split('_'),\n        'pashto-modern': ('یک\\u200cشنبه_دوشنبه_سه\\u200cشنبه_چهارشنبه_پنج\\u200cشنبه_جمعه_شنبه').split('_')\n      }[dialect]\n    , weekdaysShort:\n      {\n        'pashto': ('یک\\u200cشنبه_دوشنبه_سه\\u200cشنبه_چهارشنبه_پنج\\u200cشنبه_آدینه_شنبه').split('_'),\n        'pashto-modern': ('یک\\u200cشنبه_دوشنبه_سه\\u200cشنبه_چهارشنبه_پنج\\u200cشنبه_جمعه_شنبه').split('_')\n      }[dialect]\n    , weekdaysMin:\n      {\n        'pashto': 'ی_د_س_چ_پ_آ_ش'.split('_'),\n        'pashto-modern': 'ی_د_س_چ_پ_ج_ش'.split('_')\n      }[dialect]\n    , longDateFormat:\n      { LT: 'HH:mm'\n      , L: 'jYYYY/jMM/jDD'\n      , LL: 'jD jMMMM jYYYY'\n      , LLL: 'jD jMMMM jYYYY LT'\n      , LLLL: 'dddd، jD jMMMM jYYYY LT'\n      }\n    , calendar:\n      { sameDay: '[امروز ساعت] LT'\n      , nextDay: '[فردا ساعت] LT'\n      , nextWeek: 'dddd [ساعت] LT'\n      , lastDay: '[دیروز ساعت] LT'\n      , lastWeek: 'dddd [ی پیش ساعت] LT'\n      , sameElse: 'L'\n      }\n    , relativeTime:\n      { future: 'در %s'\n      , past: '%s پیش'\n      , s: 'چند ثانیه'\n      , m: '1 دقیقه'\n      , mm: '%d دقیقه'\n      , h: '1 ساعت'\n      , hh: '%d ساعت'\n      , d: '1 روز'\n      , dd: '%d روز'\n      , M: '1 ماه'\n      , MM: '%d ماه'\n      , y: '1 سال'\n      , yy: '%d سال'\n      }\n    , preparse: function (string) {\n        if (usePersianDigits) {\n          return string.replace(/[۰-۹]/g, function (match) {\n            return numberMap[match]\n          }).replace(/،/g, ',')\n        }\n        return string\n    }\n    , postformat: function (string) {\n        if (usePersianDigits) {\n          return string.replace(/\\d/g, function (match) {\n            return symbolMap[match]\n          }).replace(/,/g, '،')\n        }\n        return string\n    }\n    , ordinal: '%dم'\n    , week:\n      { dow: 6 // Saturday is the first day of the week.\n      , doy: 12 // The week that contains Jan 1st is the first week of the year.\n      }\n    , meridiem: function (hour) {\n        return hour < 12 ? 'ق.ظ' : 'ب.ظ'\n      }\n    , jMonths:\n      {\n        'pashto': ('وری_غویی_غبرګولی_چنګاښ_زمری_وږی_تله_لړم_لیندی_مرغومی_سلواغه_کب').split('_'),\n        'pashto-modern': ('وری_غویی_غبرګولی_چنګاښ_زمری_وږی_تله_لړم_لیندی_مرغومی_سلواغه_کب').split('_')\n      }[dialect]\n    , jMonthsShort:\n      {\n        'pashto': 'وری_غوی_غبر_چنګ_زمر_وږی_لړم_لین_مرغ_سلو_کب'.split('_'),\n        'pashto-modern': 'وری_غوی_غبر_چنګ_زمر_وږی_لړم_لین_مرغ_سلو_کب'.split('_')\n      }[dialect]\n    }\n  )\n}\n\njMoment.jConvert =  { toJalaali: toJalaali\n                    , toGregorian: toGregorian\n                    }\n\n/************************************\n    Jalaali Conversion\n************************************/\n\nfunction toJalaali(gy, gm, gd) {\n  try {\n    var j = jalaali.toJalaali(gy, gm + 1, gd)\n    j.jm -= 1\n    return j\n  } catch (e) {\n    return {\n      jy: NaN\n      , jm: NaN\n      , jd: NaN\n    }\n  }\n}\n\nfunction toGregorian(jy, jm, jd) {\n  try {\n    var g = jalaali.toGregorian(jy, jm + 1, jd)\n    g.gm -= 1\n    return g\n  } catch (e) {\n    return {\n      gy: NaN\n      , gm: NaN\n      , gd: NaN\n    }\n  }\n}\n\n/*\n  Utility helper functions.\n*/\n\nfunction div(a, b) {\n  return ~~(a / b)\n}\n\nfunction mod(a, b) {\n  return a - ~~(a / b) * b\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/moment-jalaali/index.js\n");

/***/ })

};
;